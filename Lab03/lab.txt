3.1:
  a: When testing the easiest sudoku problem, the depth-first-search did not find an answer,
     the AC3 solution found the solution quickly, the backtracking_search took a few seconds
     but was successful, and min_conflicts did not find a solution. Depth-first-search did not
     work because its algorithm is not very robust and not suited to large search spaces.
     Min_conflicts has the same problem as depth-first-search, being unsuited for larger search
     spaces. AC3 is a very fast algorithm and can do quick comparison, so it solved the problem
     quickly. Backtracking was also able to solve the problem, but took longer because of the
     number of paths it had to check.
  b: When both of the suggested changes are made to the parameters the problem is solved much
     more quickly. When only the first change is made (unassigned_variable=mrv), the program
     is unable to solve the problem, but with only forward_checking implemented the problem is
     also solved very quickly.
3.2:
  a: -AC3 fails when n=1
     -backtracking works well for lower values of n, but when n increases to be 30 and above,
       the program takes too long to solve.
     -min_conflicts also works well for lower values of n, and is able to quickly solve problems
       up to n=3000 until the solution begins to take too long.
  b: unassigned_variable=mrv and inference=forward_checking are the best implementation
     settings, as it was able to solve the problem quickly still at n=200. Both mrv (minimum
     remaining values) and forward checking are extra options that increase the quality of
     paths searched by the backtracking algorithm.
  c: For a game size of n=100, the min-conflicts algorithm began to fail to work at
     approximately max_steps=60, although it only failed to solve the problem once every several
     attempts at that max_steps value.
3.3:
  a: CSPs, or constraint satisfaction problems, are problems that are solved by placing
     variables in domains in a manner that is consistent with all problem constraints.
     Traditional problems instead are solved by defining an initial state, a set of possible
     actions, a model for transition from one state to another, and goal testing at each state
     to determine if a solution is found. Another way to look at traditional problem solving is
     that it is searching down multiple paths for the path that leads to the solution. CSPs
     instead are like puzzles that needs to have all of their components in the proper place.
  b: Traditional search heuristics are usually not very robust as there is a limit to which a
     search can be optimized. CSP heuristics on the other hand can be much more complicated and
     can be optimized for solving specific types of problems. Examples of CSP heuristics are
     AC3, backtracking_search, and min_conflicts.
