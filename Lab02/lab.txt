Sean Brouwer		CS344		Spring 2019

2.1:
    a: The hill-climbing and simulated annealing solutions both solve the problem correctly.
	b: Hill-climbing works more quickly than annealing as shown in one example below:
		Hill-climbing time: 6.866455078125e-05 s
		Annealing time:		0.004728555679321289 s
	c: The starting value of x only affects the time taken to solve the problem as the distance
		from the starting point to the end value is directly related to solving time.
	d: The algorithms work by stepping by a factor of delta, so if 15 is unreachable from the
		initial value by only delta size steps, the solutions will be incorrect. As long as the
		solution is reachable by delta steps, the solution will be found more quickly with a
		larger x value.
	e: The exp_schedule() determines the time taken by the function to search, with lower time
		being faster but less accurate.

2.2:
	a: Neither algorithm successfully solves the problem with default delta (1.0) and exp_schedule
		values consistently. By lowering delta to 0.001 and raising the schedule limit to 10000
		both of the algorithms are able to consistently solve the problem, but require more time
		to solve it.
	b: Once again, hill climbing proved to be the faster algorithm. Example times below:
		Hill-climbing time:	0.0016210079193115234 s
		Annealing time:		0.04597949981689453 s
	c: Decreasing step size makes the results more accurate but take longer to compute. The step
		must at least be lower than 0.1 to consistently reach the correct maximum
	d: The maximum result is 30, 30, and the minimum result is approximately 2, 2. Both functions
		compute these results relatively accurately, within 0.2 of the correct number.

2.3:
	a: Each algorithm on average finds a higher maximum because the random restarts occasionally
	    start within an area with a higher local maximum.
    b: Both algorithms find a maximum just shy of 30 on average, with hill climbing having an
        average of 29.9 and annealing having an average of 29.7
    c: Hill-climbing still works better because its maximum arrives closer to the actual value of
        30, but not by much. This is because I have optimized the code to run more restarts with
        less time spent on each individual search. The scheduling limit for annealing is set to
        800, which does not provide as much accuracy for each restart.
2.4:
    a: The beam search would work best for the simulated annealing algorithm because annealing
        could spend more time refining the result of higher initial values rather than spending
        equal time on all initial values provided by the random restarts.
    b: Given reasonable space and time constraints the best solution of 30 could be achieved by
        the search algorithms.
    c: The code would be similar to random restarts, only with an additional check to determine
        if an initial value is worth pursuing by comparing it to the current best result. This
        would allow the search to skip over any initial values that are too low.